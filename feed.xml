<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
  <id>https://minghui.space/til/feed.xml</id>
  <link rel="self" type="application/atom+xml" href="https://minghui.space/til/feed.xml"/>
  <link rel="alternate" type="text/html" href="https://minghui.space/til/"/>
  <updated>2024-01-16T21:49:17.000+00:00</updated>
  <title>Minghui Zhu / til</title>
  <subtitle>
    Things I've Learned: brief blurbs on miscellaneous matter.
  </subtitle>
  <icon>https://minghui.space/til/assets/favicon.png</icon>
  <author>
    <name>Minghui Zhu</name>
    <uri>https://minghui.space</uri>
  </author>
  <rights>© 2025 Minghui Zhu ⸱ licensed under CC BY 4.0</rights>
  <generator uri="https://github.com/zhuminghui17/til">til</generator>
  <entry>
    <id>
      https://minghui.space/til/on-solving-non-linear-programming-problems/
    </id>
    <link rel="alternate" type="text/html" href="https://minghui.space/til/on-solving-non-linear-programming-problems/"/>
    <published>2024-01-16T16:48:25.000-05:00</published>
    <updated>2024-01-16T21:49:17.000+00:00</updated>
    <title>on solving non-linear programming problems</title>
    <author>
      <name>Minghui Zhu</name>
      <uri>https://minghui.space</uri>
    </author>
    <category term="optimization"/>
    <content type="html"><![CDATA[<p>
  Given 2 valid models, A and B, for a non-LP problem, and you want to minimize solution time:
</p>
<ul>
  <li>
    <p>
      Each model has an integer space flesh, (convex hull) which is searched through with Branch &amp; Bound
    </p>
  </li>
  <li>
    <p>
      Each model also has a “crust”, which is what happens when you relax the constraints to become an LP.
    </p>
    <ul>
      <li>
        <p>
          Let’s call it A_lp, B_lp
        </p>
      </li>
    </ul>
  </li>
  <li>
    <p>
      The crust is useless search space that takes up time in the branch and bound, therefore we should try to minimize it. However, solving linear programming is easy.
    </p>
  </li>
  <li>
    <p>
      You can minimize it by:
    </p>
    <ul>
      <li>
        <p>
          Proving A_lp is a subset of B_lp, then choose (A) as your model
        </p>
      </li>
      <li>
        <p>
          Proving B_lp is a subset of A_lp, then choose (B) as your model
        </p>
      </li>
      <li>
        <p>
          If neither of these are the case, then choose (A intersect B) as your model
        </p>
      </li>
    </ul>
  </li>
</ul>]]></content>
    <rights>© 2024 Minghui Zhu ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>
      https://minghui.space/til/how-to-parallelize-a-script-in-bash/
    </id>
    <link rel="alternate" type="text/html" href="https://minghui.space/til/how-to-parallelize-a-script-in-bash/"/>
    <published>2024-01-08T11:22:01.000-05:00</published>
    <updated>2024-01-08T16:26:02.000+00:00</updated>
    <title>How to Parallelize a Script in Bash</title>
    <author>
      <name>Minghui Zhu</name>
      <uri>https://minghui.space</uri>
    </author>
    <content type="html"><![CDATA[<p>
  For running <code>scriptName.sh</code>, while passing in option of an index of <code>arrayThatVaries</code>:
</p>
<pre data-code-block data-lang="bash"><code><span data-line="1"><span style="color:#24292EFF;">arrayThatVaries=(</span>
</span><span data-line="2"><span style="color:#24292EFF;">  </span><span style="color:#22863A;">&quot;entry1&quot;</span>
</span><span data-line="3"><span style="color:#24292EFF;">  </span><span style="color:#22863A;">&quot;entry2&quot;</span>
</span><span data-line="4"><span style="color:#24292EFF;">  </span><span style="color:#22863A;">&quot;entry3&quot;</span>
</span><span data-line="5"><span style="color:#24292EFF;">)</span>
</span><span data-line="6">
</span><span data-line="7">
</span><span data-line="8"><span style="color:#24292EFF;">(trap </span><span style="color:#22863A;">'kill 0'</span><span style="color:#24292EFF;"> SIGINT</span><span style="color:#D32F2F;">;</span><span style="color:#24292EFF;"> </span><span style="color:#D32F2F;">for</span><span style="color:#24292EFF;"> i </span><span style="color:#D32F2F;">in</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">&quot;${</span><span style="color:#D32F2F;">!</span><span style="color:#22863A;">arrayThatVaries[@]}&quot;</span><span style="color:#D32F2F;">;</span><span style="color:#24292EFF;"> </span><span style="color:#D32F2F;">do</span>
</span><span data-line="9"><span style="color:#24292EFF;">  scriptName.sh --option </span><span style="color:#22863A;">&quot;${arrayThatVaries[$i]}&quot;</span><span style="color:#24292EFF;"> --index </span><span style="color:#22863A;">&quot;$i&quot;</span><span style="color:#24292EFF;"> </span><span style="color:#D32F2F;">&amp;</span>
</span><span data-line="10"><span style="color:#D32F2F;">done</span>
</span><span data-line="11"><span style="color:#24292EFF;">wait)</span>
</span></code></pre>]]></content>
    <rights>© 2024 Minghui Zhu ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>
      https://minghui.space/til/building-postgres-on-mac/
    </id>
    <link rel="alternate" type="text/html" href="https://minghui.space/til/building-postgres-on-mac/"/>
    <published>2024-01-01T09:22:36.000-05:00</published>
    <updated>2024-01-01T14:30:55.000+00:00</updated>
    <title>Building Postgres on Mac</title>
    <author>
      <name>Minghui Zhu</name>
      <uri>https://minghui.space</uri>
    </author>
    <content type="html"><![CDATA[<p>
  While trying to install Postgres today, I thought it’d be fun to try 16.1 for the fun of it.
</p>
<p>
  I ran the command with asdf as <code>asdf install postgres 16.1</code>
</p>
<p>
  Turns out, Postgres updated things in update 16 (building with ic4uc by default now) and I kept getting this error:
</p>
<pre data-code-block><code>checking for icu-uc icu-i18n... no
configure: error: ICU library not found
If you have ICU already installed, see config.log for details on the
failure.  It is possible the compiler isn't looking in the proper directory.
Use --without-icu to disable ICU support.</code></pre>
<p>
  I found an article describing <em>this exact issue</em> on someone’s blog at <a href="https://viggy28.dev/article/postgres-v16-icu-installation-issue/" target="_blank">https://viggy28.dev/article/postgres-v16-icu-installation-issue/</a>
</p>
<p>
  The solution was to run this following block instead:
</p>
<pre data-code-block data-lang="sh"><code><span data-line="1"><span style="color:#D32F2F;">export</span><span style="color:#24292EFF;"> PKG_CONFIG_PATH=/usr/local/opt/icu4c/lib/pkgconfig/</span>
</span><span data-line="2"><span style="color:#24292EFF;">asdf install postgres 16.1</span>
</span></code></pre>
<p>
  Thanks a bunch Vignesh! It saved me a ton of time. I wonder if this would be what it felt like to use Stack Overflow 10 years ago.
</p>]]></content>
    <rights>© 2024 Minghui Zhu ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>
      https://minghui.space/til/interesting-rails-conventions/
    </id>
    <link rel="alternate" type="text/html" href="https://minghui.space/til/interesting-rails-conventions/"/>
    <published>2023-12-01T12:06:08.000-05:00</published>
    <updated>2023-12-01T17:52:01.000+00:00</updated>
    <title>Interesting Rails Conventions</title>
    <author>
      <name>Minghui Zhu</name>
      <uri>https://minghui.space</uri>
    </author>
    <category term="rails"/>
    <content type="html"><![CDATA[<p>
  As a noob in programming in Ruby on Rails, I feel like there’s a lot to learn. Unfortunately Intellisense doesn’t work great leading to harder discoverability. Convention over configuration is great, but only if you already know that convention. Here’s some miscellaneous things that I found interesting while reading the Ruby on Rails guides (for v7.1.2).
</p>
<p>
  Disclaimer: I’m still very new to this, so if anything here is wrong please let me know!
</p>
<h2 id="notes">
  <a href="#notes" data-anchor>Notes:</a>
</h2>
<ul>
  <li>
    <p>
      In regex, use <code>\A</code> and <code>\z</code> to indicate the start and end of the string. <a href="#fn:a" id="fn:a.ref" data-footnote-ref aria-label="note"><sup>1</sup></a>
    </p>
  </li>
  <li>
    <p>
      <code>has_many :books, dependent: :destroy</code> <a href="#fn:b" id="fn:b.ref" data-footnote-ref aria-label="note"><sup>2</sup></a>
    </p>
  </li>
  <li>
    <p>
      Use <code>has_and_belongs_to_many</code> to build an implicit join table easily, otherwise <code>has_many :through</code>
    </p>
  </li>
  <li>
    <p>
      Symbol vs String: Use Symbol when the identity of it matters, use String when contents matter
    </p>
  </li>
  <li>
    <p>
      <code>-&gt; { method }</code> or <code>-&gt;(args) { method(args)}</code> is a lambda
    </p>
  </li>
  <li>
    <p>
      Metaprogramming makes things confusing. As a beginner, try not to touch it if possible (and to keep code readable).
    </p>
  </li>
  <li>
    <p>
      ActiveJob is really cool
    </p>
  </li>
  <li>
    <p>
      You can use <code>&lt;%= method %&gt;</code> erb-style interpolation in YAML files, somehow. I should figure out how.
    </p>
  </li>
  <li>
    <p>
      An ActiveStorage “file” is called an attachment
    </p>
  </li>
  <li>
    <p>
      You should periodically purge unattached uploads <a href="#fn:c" id="fn:c.ref" data-footnote-ref aria-label="note"><sup>3</sup></a>
    </p>
  </li>
</ul>
<h2 id="full-text">
  <a href="#full-text" data-anchor>Full text:</a>
</h2>
<pre data-code-block data-lang="rb"><code><span data-line="1"><span style="color:#D32F2F;">class</span><span style="color:#24292EFF;"> </span><span style="color:#6F42C1;">Author</span><span style="color:#24292EFF;"> </span><span style="color:#D32F2F;">&lt;</span><span style="color:#24292EFF;"> </span><span style="color:#6F42C1;">ApplicationRecord</span>
</span><span data-line="2"><span style="color:#24292EFF;">  has_many :books</span><span style="color:#212121;">,</span><span style="color:#24292EFF;"> dependent: :destroy</span>
</span><span data-line="3"><span style="color:#D32F2F;">end</span>
</span><span data-line="4">
</span><span data-line="5"><span style="color:#D32F2F;">class</span><span style="color:#24292EFF;"> </span><span style="color:#6F42C1;">Book</span><span style="color:#24292EFF;"> </span><span style="color:#D32F2F;">&lt;</span><span style="color:#24292EFF;"> </span><span style="color:#6F42C1;">ApplicationRecord</span>
</span><span data-line="6"><span style="color:#24292EFF;">  belongs_to :author</span>
</span><span data-line="7"><span style="color:#D32F2F;">end</span>
</span><span data-line="8">
</span></code></pre><pre data-code-block data-lang="rb"><code><span data-line="1"><span style="color:#24292EFF;">namespace :active_storage </span><span style="color:#D32F2F;">do</span>
</span><span data-line="2"><span style="color:#24292EFF;">  desc </span><span style="color:#22863A;">&quot;Purges unattached Active Storage blobs. Run regularly.&quot;</span>
</span><span data-line="3"><span style="color:#24292EFF;">  task purge_unattached: :environment </span><span style="color:#D32F2F;">do</span>
</span><span data-line="4"><span style="color:#24292EFF;">    </span><span style="color:#1976D2;">ActiveStorage</span><span style="color:#212121;">::</span><span style="color:#1976D2;">Blob</span><span style="color:#212121;">.</span><span style="color:#24292EFF;">unattached</span><span style="color:#212121;">.</span><span style="color:#24292EFF;">where(created_at: </span><span style="color:#212121;">..</span><span style="color:#1976D2;">2</span><span style="color:#212121;">.</span><span style="color:#24292EFF;">days</span><span style="color:#212121;">.</span><span style="color:#24292EFF;">ago)</span><span style="color:#212121;">.</span><span style="color:#24292EFF;">find_each(</span><span style="color:#D32F2F;">&amp;</span><span style="color:#24292EFF;">:purge_later)</span>
</span><span data-line="5"><span style="color:#24292EFF;">  </span><span style="color:#D32F2F;">end</span>
</span><span data-line="6"><span style="color:#D32F2F;">end</span>
</span></code></pre>
<p>
  The query generated by ActiveStorage::Blob.unattached can be slow and potentially disruptive on applications with larger databases.
</p>
<section data-footnotes aria-label="footnotes">
  <ol>
    <li id="fn:a">
      <p>
        use <code>\A</code> and <code>\z</code> to match the start and end of the string, <code>^</code> and <code>$</code> match the start/end of a line. Due to frequent misuse of <code>^</code> and <code>$</code>, you need to pass the multiline: true option in case you use any of these two anchors in the provided regular expression. In most cases, you should be using <code>\A</code> and <code>\z</code>.
      </p>
      <a href="#fn:a.ref" data-footnote-backref aria-label="return">↩</a>
    </li>
    <li id="fn:b">
      <a href="#fn:b.ref" data-footnote-backref aria-label="return">↩</a>
    </li>
    <li id="fn:c">
      <a href="#fn:c.ref" data-footnote-backref aria-label="return">↩</a>
    </li>
  </ol>
</section>]]></content>
    <rights>© 2023 Minghui Zhu ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>https://minghui.space/til/docker-compose/</id>
    <link rel="alternate" type="text/html" href="https://minghui.space/til/docker-compose/"/>
    <published>2023-11-30T09:14:26.000-05:00</published>
    <updated>2023-11-30T14:18:13.000+00:00</updated>
    <title>docker compose</title>
    <author>
      <name>Minghui Zhu</name>
      <uri>https://minghui.space</uri>
    </author>
    <category term="docker"/>
    <content type="html"><![CDATA[<p>
  This past Black Friday (~4 days ago), I went on a shopping spree and bought… servers. Plain old servers. Being that most of my experience is Jamstack/serverless/Static Hosting, I thought it’d be interesting to self host some of the stuff myself.
</p>
<p>
  While I am working on a Ruby on Rails project right now, I’ve been trying to make sure the stuff <em>around</em> the product are useful and present as well (monitoring, logs, etc.)
</p>
<p>
  So, I spent the past few hours playing with Uptime Kuma, and found a way to host multiple instances on the same IP address, all within a Docker Compose. Here’s the yaml. Hopefully someone finds this useful!
</p>
<pre data-code-block data-lang="yaml"><code><span data-line="1"><span style="color:#C2C3C5;"># https://github.com/SteveLTN/https-portal</span>
</span><span data-line="2"><span style="color:#C2C3C5;"># https://github.com/louislam/uptime-kuma/wiki/Reverse-Proxy</span>
</span><span data-line="3">
</span><span data-line="4"><span style="color:#D32F2F;">version</span><span style="color:#D32F2F;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">&quot;3.3&quot;</span>
</span><span data-line="5">
</span><span data-line="6"><span style="color:#D32F2F;">services</span><span style="color:#D32F2F;">:</span>
</span><span data-line="7"><span style="color:#24292EFF;">  </span><span style="color:#D32F2F;">https-portal</span><span style="color:#D32F2F;">:</span>
</span><span data-line="8"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">image</span><span style="color:#D32F2F;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">steveltn/https-portal:1</span>
</span><span data-line="9"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">ports</span><span style="color:#D32F2F;">:</span>
</span><span data-line="10"><span style="color:#24292EFF;">      - </span><span style="color:#22863A;">&quot;80:80&quot;</span>
</span><span data-line="11"><span style="color:#24292EFF;">      - </span><span style="color:#22863A;">&quot;443:443&quot;</span>
</span><span data-line="12"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">links</span><span style="color:#D32F2F;">:</span>
</span><span data-line="13"><span style="color:#24292EFF;">      - </span><span style="color:#22863A;">uptime-kuma-kevinjiang-ca</span>
</span><span data-line="14"><span style="color:#24292EFF;">      - </span><span style="color:#22863A;">uptime-kuma-k-j-ca</span>
</span><span data-line="15"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">restart</span><span style="color:#D32F2F;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">always</span>
</span><span data-line="16"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">environment</span><span style="color:#D32F2F;">:</span>
</span><span data-line="17"><span style="color:#24292EFF;">      </span><span style="color:#D32F2F;">DOMAINS</span><span style="color:#D32F2F;">:</span>
</span><span data-line="18"><span style="color:#24292EFF;">        </span><span style="color:#22863A;">&quot;status.kevinjiang.ca -&gt; http://uptime-kuma-kevinjiang-ca:3001,</span>
</span><span data-line="19"><span style="color:#22863A;">        status.k-j.ca -&gt; http://uptime-kuma-k-j-ca:3002&quot;</span>
</span><span data-line="20"><span style="color:#24292EFF;">      </span><span style="color:#C2C3C5;"># STAGE: 'production' # Don't use production until staging works</span>
</span><span data-line="21"><span style="color:#24292EFF;">      </span><span style="color:#D32F2F;">STAGE</span><span style="color:#D32F2F;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">&quot;production&quot;</span>
</span><span data-line="22"><span style="color:#24292EFF;">      </span><span style="color:#C2C3C5;"># FORCE_RENEW: 'true'</span>
</span><span data-line="23"><span style="color:#24292EFF;">      </span><span style="color:#D32F2F;">WEBSOCKET</span><span style="color:#D32F2F;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">&quot;true&quot;</span>
</span><span data-line="24"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">volumes</span><span style="color:#D32F2F;">:</span>
</span><span data-line="25"><span style="color:#24292EFF;">      - </span><span style="color:#22863A;">https-portal-data:/var/lib/https-portal</span>
</span><span data-line="26">
</span><span data-line="27"><span style="color:#24292EFF;">  </span><span style="color:#D32F2F;">uptime-kuma-kevinjiang-ca</span><span style="color:#D32F2F;">:</span>
</span><span data-line="28"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">image</span><span style="color:#D32F2F;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">louislam/uptime-kuma:1</span>
</span><span data-line="29"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">container_name</span><span style="color:#D32F2F;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">uptime-kuma-kevinjiang-ca</span>
</span><span data-line="30"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">volumes</span><span style="color:#D32F2F;">:</span>
</span><span data-line="31"><span style="color:#24292EFF;">      - </span><span style="color:#22863A;">./uptime-kuma-kevinjiang-ca:/app/data</span>
</span><span data-line="32"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">ports</span><span style="color:#D32F2F;">:</span>
</span><span data-line="33"><span style="color:#24292EFF;">      - </span><span style="color:#22863A;">3001:3001</span>
</span><span data-line="34">
</span><span data-line="35"><span style="color:#24292EFF;">  </span><span style="color:#D32F2F;">uptime-kuma-k-j-ca</span><span style="color:#D32F2F;">:</span>
</span><span data-line="36"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">image</span><span style="color:#D32F2F;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">louislam/uptime-kuma:1</span>
</span><span data-line="37"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">container_name</span><span style="color:#D32F2F;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">uptime-kuma-k-j-ca</span>
</span><span data-line="38"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">volumes</span><span style="color:#D32F2F;">:</span>
</span><span data-line="39"><span style="color:#24292EFF;">      - </span><span style="color:#22863A;">./uptime-kuma-k-j-ca:/app/data</span>
</span><span data-line="40"><span style="color:#24292EFF;">    </span><span style="color:#D32F2F;">ports</span><span style="color:#D32F2F;">:</span>
</span><span data-line="41"><span style="color:#24292EFF;">      - </span><span style="color:#22863A;">3002:3001</span>
</span><span data-line="42">
</span><span data-line="43"><span style="color:#D32F2F;">volumes</span><span style="color:#D32F2F;">:</span>
</span><span data-line="44"><span style="color:#24292EFF;">  </span><span style="color:#D32F2F;">https-portal-data</span><span style="color:#D32F2F;">:</span>
</span></code></pre>]]></content>
    <rights>© 2023 Minghui Zhu ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>
      https://minghui.space/til/dnssec3-hashing-and-cracking/
    </id>
    <link rel="alternate" type="text/html" href="https://minghui.space/til/dnssec3-hashing-and-cracking/"/>
    <published>2023-10-30T00:47:32.000-04:00</published>
    <updated>2023-10-30T05:28:33.000+00:00</updated>
    <title>DNSSEC3 Hashing, and Cracking</title>
    <author>
      <name>Minghui Zhu</name>
      <uri>https://minghui.space</uri>
    </author>
    <category term="domains"/>
    <content type="html"><![CDATA[<p>
  So I’ve been on a journey to make a niche domain search tool, similar to <a href="http://micro.domains" target="_blank">micro.domains</a>. I thought a key competitive advantage would be the ability to quickly query which domains exist and which ones don’t, without having to send out a bunch of whois requests. (This was the original motivation but this entire post is a rabbit-hole down DNSSEC).
</p>
<p>
  DNSSEC and DNSSEC3 are additional standards to reduce the availability of publically available DNS data, in the name of security through obscurity. Sure, if you apply it on your own corporate subdomain it’s still understandable, but it also applies to “full domains” as well (e.g. google.com). Which means, even if I have the zone files from CZDS, I can’t enumerate all the domain names for… reasons?
</p>
<p>
  For DNSSEC, it’s trivial to enumerate everything. For example, let’s say everything under .ca was encrypted using DNSSEC, and I wanted to find all the domains. I would simply be able to ask for <code>a.ca</code>, then if that domain doesn’t exist, it’ll tell me the next and previous domains registered. I can then just follow these “pointers”, until I have everything under the TLD. Fun days.
</p>
<p>
  However, DNSSEC3 removes some of that fun by making it so that it gives you ranges of hashes where a domain doesn’t exist. No fun pointers to follow anymore :(.
</p>
<p>
  So then how do you enumerate? Now it’s no longer guaranteed, but you can get decently close, roughly 79% <a href="#fn:a" id="fn:a.ref1" data-footnote-ref aria-label="note"><sup>1</sup></a>.
</p>
<p>
  One way is to use GPU-based Hash Breaking<a href="#fn:b" id="fn:b.ref" data-footnote-ref aria-label="note"><sup>2</sup></a>. From this 2014 paper, it seems to suggest that all the domains use SHA-1, and each TLD uses a constant salt for all their domains. I’m not sure if it’s the case, but I wonder if you could find the salt and brute force everything still?
</p>
<p>
  In a paper from 2017<a href="#fn:a" id="fn:a.ref2" data-footnote-ref aria-label="note"><sup>1</sup></a>, it seems like they did a brute force using relatively older GPUs (7 graphics cards from 2011 to 2016) and got the 79% previously mentioned in 2 weeks. Given that I have a 3090, I assume this is way easier to do, and I’ll have to look for implementations.
</p>
<p>
  References:
</p>
<section data-footnotes aria-label="footnotes">
  <ol>
    <li id="fn:a">
      <p>
        <a href="https://ieeexplore.ieee.org/document/8002913" target="_blank">https://ieeexplore.ieee.org/document/8002913</a>
      </p>
      <a href="#fn:a.ref1" data-footnote-backref aria-label="return">↩</a><a href="#fn:a.ref2" data-footnote-backref aria-label="return">↩</a>
    </li>
    <li id="fn:b">
      <p>
        <a href="https://ieeexplore.ieee.org/document/6924218" target="_blank">https://ieeexplore.ieee.org/document/6924218</a>
      </p>
      <a href="#fn:b.ref" data-footnote-backref aria-label="return">↩</a>
    </li>
  </ol>
</section>]]></content>
    <rights>© 2023 Minghui Zhu ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>https://minghui.space/til/i-made-a-til/</id>
    <link rel="alternate" type="text/html" href="https://minghui.space/til/i-made-a-til/"/>
    <published>2023-10-29T01:59:51.000-04:00</published>
    <updated>2023-10-29T06:02:48.000+00:00</updated>
    <title>I made a TIL</title>
    <author>
      <name>Minghui Zhu</name>
      <uri>https://minghui.space</uri>
    </author>
    <content type="html"><![CDATA[<p>
  After months of lusting after my own microblogging site for posting random TILs, now I have one! I hope that this will be a way to make the constant rabbit holes I go down at least somewhat productive, even if only for other people.
</p>
<p>
  I’m taking <a href="https://github.com/leebyron/til" target="_blank">Lee Byron’s template</a>, which is great for me because it’s not overly complex, and relies upon JS rather than Python.
</p>
<p>
  I hope to actually post at last a few sentences daily from now on. Cheers!
</p>]]></content>
    <rights>© 2023 Minghui Zhu ⸱ licensed under CC BY 4.0</rights>
  </entry>
</feed>